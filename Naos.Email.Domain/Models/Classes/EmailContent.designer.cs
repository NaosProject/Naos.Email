// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.177.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Email.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class EmailContent : IModel<EmailContent>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="EmailContent"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(EmailContent left, EmailContent right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="EmailContent"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(EmailContent left, EmailContent right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(EmailContent other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Subject.IsEqualTo(other.Subject, StringComparer.Ordinal)
                      && this.PlaintextBody.IsEqualTo(other.PlaintextBody, StringComparer.Ordinal)
                      && this.HtmlBody.IsEqualTo(other.HtmlBody, StringComparer.Ordinal)
                      && this.Attachments.IsEqualTo(other.Attachments)
                      && this.ContentIdToHtmlBodyLinkedResourceMap.IsEqualTo(other.ContentIdToHtmlBodyLinkedResourceMap)
                      && this.SubjectEncodingKind.IsEqualTo(other.SubjectEncodingKind)
                      && this.PlaintextBodyEncodingKind.IsEqualTo(other.PlaintextBodyEncodingKind)
                      && this.HtmlBodyEncodingKind.IsEqualTo(other.HtmlBodyEncodingKind);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as EmailContent);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Subject)
            .Hash(this.PlaintextBody)
            .Hash(this.HtmlBody)
            .Hash(this.Attachments)
            .Hash(this.ContentIdToHtmlBodyLinkedResourceMap)
            .Hash(this.SubjectEncodingKind)
            .Hash(this.PlaintextBodyEncodingKind)
            .Hash(this.HtmlBodyEncodingKind)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public EmailContent DeepClone()
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Subject" />.
        /// </summary>
        /// <param name="subject">The new <see cref="Subject" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="subject" /> for <see cref="Subject" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithSubject(string subject)
        {
            var result = new EmailContent(
                                 subject,
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="PlaintextBody" />.
        /// </summary>
        /// <param name="plaintextBody">The new <see cref="PlaintextBody" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="plaintextBody" /> for <see cref="PlaintextBody" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithPlaintextBody(string plaintextBody)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 plaintextBody,
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HtmlBody" />.
        /// </summary>
        /// <param name="htmlBody">The new <see cref="HtmlBody" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="htmlBody" /> for <see cref="HtmlBody" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithHtmlBody(string htmlBody)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 htmlBody,
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Attachments" />.
        /// </summary>
        /// <param name="attachments">The new <see cref="Attachments" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="attachments" /> for <see cref="Attachments" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithAttachments(IReadOnlyCollection<EmailAttachment> attachments)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 attachments,
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ContentIdToHtmlBodyLinkedResourceMap" />.
        /// </summary>
        /// <param name="contentIdToHtmlBodyLinkedResourceMap">The new <see cref="ContentIdToHtmlBodyLinkedResourceMap" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="contentIdToHtmlBodyLinkedResourceMap" /> for <see cref="ContentIdToHtmlBodyLinkedResourceMap" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithContentIdToHtmlBodyLinkedResourceMap(IReadOnlyDictionary<string, EmailAttachment> contentIdToHtmlBodyLinkedResourceMap)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 contentIdToHtmlBodyLinkedResourceMap,
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="SubjectEncodingKind" />.
        /// </summary>
        /// <param name="subjectEncodingKind">The new <see cref="SubjectEncodingKind" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="subjectEncodingKind" /> for <see cref="SubjectEncodingKind" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithSubjectEncodingKind(EncodingKind? subjectEncodingKind)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 subjectEncodingKind,
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="PlaintextBodyEncodingKind" />.
        /// </summary>
        /// <param name="plaintextBodyEncodingKind">The new <see cref="PlaintextBodyEncodingKind" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="plaintextBodyEncodingKind" /> for <see cref="PlaintextBodyEncodingKind" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithPlaintextBodyEncodingKind(EncodingKind? plaintextBodyEncodingKind)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 plaintextBodyEncodingKind,
                                 this.HtmlBodyEncodingKind?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HtmlBodyEncodingKind" />.
        /// </summary>
        /// <param name="htmlBodyEncodingKind">The new <see cref="HtmlBodyEncodingKind" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EmailContent" /> using the specified <paramref name="htmlBodyEncodingKind" /> for <see cref="HtmlBodyEncodingKind" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EmailContent DeepCloneWithHtmlBodyEncodingKind(EncodingKind? htmlBodyEncodingKind)
        {
            var result = new EmailContent(
                                 this.Subject?.DeepClone(),
                                 this.PlaintextBody?.DeepClone(),
                                 this.HtmlBody?.DeepClone(),
                                 this.Attachments?.DeepClone(),
                                 this.ContentIdToHtmlBodyLinkedResourceMap?.DeepClone(),
                                 this.SubjectEncodingKind?.DeepClone(),
                                 this.PlaintextBodyEncodingKind?.DeepClone(),
                                 htmlBodyEncodingKind);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.Email.Domain.EmailContent: Subject = {this.Subject?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, PlaintextBody = {this.PlaintextBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HtmlBody = {this.HtmlBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Attachments = {this.Attachments?.ToString() ?? "<null>"}, ContentIdToHtmlBodyLinkedResourceMap = {this.ContentIdToHtmlBodyLinkedResourceMap?.ToString() ?? "<null>"}, SubjectEncodingKind = {this.SubjectEncodingKind?.ToString() ?? "<null>"}, PlaintextBodyEncodingKind = {this.PlaintextBodyEncodingKind?.ToString() ?? "<null>"}, HtmlBodyEncodingKind = {this.HtmlBodyEncodingKind?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}