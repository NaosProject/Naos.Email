// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ValidatedValidModelTestScenario{T}.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.CodeGen.ModelObject.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Recipes
{
    using OBeautifulCode.Assertion.Recipes;

    /// <summary>
    /// Specifies a scenario for testing GetValidationFailures() when no failures are expected.
    /// </summary>
    /// <typeparam name="T">The type of the object being tested.</typeparam>
#if !OBeautifulCodeCodeGenSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.CodeGen.ModelObject.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class ValidatedValidModelTestScenario<T>
        where T : class
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatedValidModelTestScenario{T}"/> class.
        /// </summary>
        /// <param name="id">The identifier of the scenario.</param>
        /// <param name="systemUnderTest">The object to test.</param>
        public ValidatedValidModelTestScenario(
            string id,
            T systemUnderTest)
        {
            new { id }.AsTest().Must().NotBeNullNorWhiteSpace();
            new { systemUnderTest }.AsTest().Must().NotBeNull(id);

            this.Id = id;
            this.SystemUnderTest = systemUnderTest;
        }

        /// <summary>
        /// Gets the identifier of the scenario.
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// Gets the object to test.
        /// </summary>
        public T SystemUnderTest { get; }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = this.Id;

            return result;
        }
    }
}
