// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.209.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Email.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Net.Mail;

    using global::FakeItEasy;

    using global::Naos.Email.Domain;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.IO;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Type;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.209.0")]
#if !NaosEmailSolution
    internal
#else
    public
#endif
    abstract class DefaultEmailDummyFactory : IDummyFactory
    {
        public DefaultEmailDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailAttachment(
                                 A.Dummy<byte[]>(),
                                 A.Dummy<string>(),
                                 A.Dummy<MediaType>(),
                                 A.Dummy<EncodingKind?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailContent(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<EmailAttachment>>(),
                                 A.Dummy<IReadOnlyDictionary<string, EmailAttachment>>(),
                                 A.Dummy<EncodingKind?>(),
                                 A.Dummy<EncodingKind?>(),
                                 A.Dummy<EncodingKind?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(FailedToSendEmailEvent<Version>),
                        typeof(SendEmailRequestedEvent<Version>),
                        typeof(SucceededInSendingEmailEvent<Version>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (EmailEventBase<Version>)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailMailbox(
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailOptions(
                                 A.Dummy<MailPriority?>(),
                                 A.Dummy<DeliveryNotificationOptions?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailParticipants(
                                 A.Dummy<EmailMailbox>(),
                                 A.Dummy<IReadOnlyCollection<EmailMailbox>>(),
                                 A.Dummy<IReadOnlyCollection<EmailMailbox>>(),
                                 A.Dummy<IReadOnlyCollection<EmailMailbox>>(),
                                 A.Dummy<IReadOnlyCollection<EmailMailbox>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FailedToSendEmailEvent<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<SendEmailResponse>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendEmailOp(
                                 A.Dummy<SendEmailRequest>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendEmailRequest(
                                 A.Dummy<EmailParticipants>(),
                                 A.Dummy<EmailContent>(),
                                 A.Dummy<EmailOptions>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendEmailRequestedEvent<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<SendEmailRequest>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendEmailResponse(
                                 A.Dummy<SendEmailResult>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(FailedToSendEmailEvent<Version>),
                        typeof(SucceededInSendingEmailEvent<Version>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (SendEmailResponseEventBase<Version>)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SmtpServerConnectionDefinition(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<SecureConnectionMethod>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SucceededInSendingEmailEvent<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<SendEmailResponse>()));
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}